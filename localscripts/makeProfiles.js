#!/usr/bin/env node
/**
 * Generates input/pagecontent/profiles.xml based on SUSHI-generated profiles
 */
let fs = require('fs');
let markdown = require("markdown").markdown;

let profileOutFile1 = "input/pagecontent/profiles.xml";  // for IG publisher
let fullFolderPath = "fsh-generated/resources/"

let ar = []
ar.push("<div xmlns='http://www.w3.org/1999/xhtml'>")
ar.push("<!-- Generated by the makeProfiles script -->")
ar.push("<br/><strong>Profiles defined in this guide</strong><br/><br/>")
ar.push("<table class='table table-bordered table-hover table-sm'>")
ar.push("<tr><th>Id</th><th>Url</th><th>Description</th></tr>")

//---------- Profiles -------------
if (fs.existsSync(fullFolderPath)) {
    let arFiles = fs.readdirSync(fullFolderPath);
    arFiles.forEach(function (name) {
        if (name.indexOf("StructureDefinition-") > -1) {
            let fullFileName = fullFolderPath + name;
            let contents = fs.readFileSync(fullFileName).toString();
            let profile;
            try {
                profile = JSON.parse(contents)
                if (profile.type !== 'Extension' && profile.kind !== 'logical') {
                    let link = "StructureDefinition-" + profile.id + ".html";

                    ar.push("<tr>")
                    ar.push("<td><a href='" + link + "'>" + profile.id + "</a></td>")
                    ar.push("<td>" + profile.url + "</td>")
                    ar.push("<td>" + cleanText(profile.description) + "</td>")
                    ar.push("</tr>")
                }
            } catch (ex) {
                console.log("error reading " + fullFileName)
            }
        }
    })
    ar.push("</table>")
} else {
    console.log("Error: Path " + fullFolderPath + " not found")
}

ar.push("</div>")
let file = ar.join('\r\n')
fs.writeFileSync(profileOutFile1, file);

//ensure that characters that can update XML are 'escaped'
function cleanText(s) {
    //replace all instances of '& ' with 'and '
    if (s) {
        let s1 = s.split('& ').join('and ')
        return markdown.toHTML(s1)
    } else {
        return s
    }
}
